(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['module', 'exports', 'jquery', 'lodash/defaults', 'lodash/assign'], factory);
  } else if (typeof exports !== "undefined") {
    factory(module, exports, require('jquery'), require('lodash/defaults'), require('lodash/assign'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, mod.exports, global.jquery, global.defaults, global.assign);
    global.ajax = mod.exports;
  }
})(this, function (module, exports, _jquery, _defaults, _assign) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _jquery2 = _interopRequireDefault(_jquery);

  var _defaults2 = _interopRequireDefault(_defaults);

  var _assign2 = _interopRequireDefault(_assign);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  /**
   * 注意：如果用React/redux开发，请用ajax-promise版本。
   *
   * 通用的ajax
   * 要求服务器返回json格式
   * @param  {String|Object}      url     URL
   * @param  {Object|undefined}   options 选项
   * @return {Promise}
   * @example
   * var Utils = require('core/utils');
   *
   * // GET
   * ajax(url)
   *     .done(function(data){
   *         // ...
   *     })
   *     .fail(function(msg){
   *         // ...
   *     });
   *
   * // POST
   *  ajax(url, {
   *     method: 'POST',
   *     data: someData
   * }).done(function(data) {
   *     // ...
   * }).fail(function(msg) {
   *     // ...
   * })
   */
  function ajax(url, options) {
    var def = _jquery2['default'].Deferred(); // eslint-disable-line

    if ((typeof url === 'undefined' ? 'undefined' : _typeof(url)) === 'object') {
      options = url;
      url = undefined;
    }

    options = (0, _defaults2['default'])(options || {}, {
      dataType: 'json',
      disableCsrfToken: false,
      successCode: 0
    });

    var success = void 0;
    var error = void 0;
    var overrideBackboneSync = options.overrideBackboneSync;

    if (overrideBackboneSync) {
      success = options.success;
      error = options.error;
      delete options.success;
      delete options.error;
      delete options.overrideBackboneSync;
    }

    var csrfToken = (window._global || {}).csrf_token;

    if (csrfToken && !options.disableCsrfToken) {
      if (!_jquery2['default'].isPlainObject(options.data)) {
        throw new Error('expects data to be a plain object when csrf token is enabled, but got JSON.stringify(options.data)');
      }

      options.data = (0, _assign2['default'])({
        csrf_token: csrfToken
      }, options.data);
    }

    def.xhr = _jquery2['default'].ajax(url, options).done(function (resp, textStatus, jqXHR) {
      if (resp.errcode !== void 0) {
        // eslint-disable-line
        resp.code = resp.errcode;
        resp.msg = resp.errmsg;
      }

      if (+resp.code === options.successCode) {
        def.resolve(resp.data, resp, jqXHR);
      } else if (resp.code === void 0) {
        // eslint-disable-line
        // for old api
        def.resolve(resp, resp, jqXHR);
      } else {
        def.reject(resp.msg, resp, jqXHR);
      }
    }).fail(function (jqXHR, msg) {
      var code = 99999;

      if (msg === 'error') {
        msg = '网络错误';
      }

      msg = msg || '数据错误';

      if (msg === 'parsererror') {
        msg = (window._global || {}).debug ? 'JSON Parse Error' : '请求错误，请稍后重试';
      }

      if (msg === 'abort') {
        code = -1;
      }

      def.reject(msg, {
        code: code,
        msg: msg
      }, jqXHR);
    });

    if (overrideBackboneSync) {
      def.done(function (data) {
        success && success(data);
      }).fail(function (data) {
        error && error(data);
      });
    }

    return def;
  }
  exports['default'] = ajax;
  module.exports = exports['default'];
});