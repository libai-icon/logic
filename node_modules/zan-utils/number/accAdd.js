(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['module', 'exports'], factory);
  } else if (typeof exports !== "undefined") {
    factory(module, exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, mod.exports);
    global.accAdd = mod.exports;
  }
})(this, function (module, exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  /**
   * 加法函数，用来得到精确的加法结果
   * @memberof module:number
   * @param {number} arg1 参数1
   * @param {number} arg2 参数2
   * @returns {number}
   * @runkit true
   * @example
   * const accAdd = require('zan-utils/number/accAdd');
   * accAdd(0.1, 0.2);
   * //0.3
   */
  function accAdd(arg1, arg2) {
    var r1 = void 0; // arg1的小数位数
    var r2 = void 0; // arg2的小数位数
    var m = void 0;
    var c = void 0;
    try {
      r1 = arg1.toString().split('.')[1].length;
    } catch (e) {
      r1 = 0;
    }
    try {
      r2 = arg2.toString().split('.')[1].length;
    } catch (e) {
      r2 = 0;
    }
    c = Math.abs(r1 - r2);
    m = Math.pow(10, Math.max(r1, r2));
    // 将arg1, arg2同时乘以10的Math.max(r1,r2)次方，可同时转化为整数
    if (c > 0) {
      var factor = Math.pow(10, c);
      if (r1 > r2) {
        arg1 = Number(arg1.toString().replace('.', ''));
        arg2 = Number(arg2.toString().replace('.', '')) * factor;
      } else {
        arg1 = Number(arg1.toString().replace('.', '')) * factor;
        arg2 = Number(arg2.toString().replace('.', ''));
      }
    } else {
      arg1 = Number(arg1.toString().replace('.', ''));
      arg2 = Number(arg2.toString().replace('.', ''));
    }
    // 将整数转化回小数
    return (arg1 + arg2) / m;
  }
  exports['default'] = accAdd;
  module.exports = exports['default'];
});