'use strict';

exports.__esModule = true;

var _components;

var _icon = require('../icon');

var _icon2 = _interopRequireDefault(_icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NOTICE_BAR_MODE = ['', 'closeable', 'link'];

exports.default = {
  render: function render() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { directives: [{ name: "show", rawName: "v-show", value: _vm.showNoticeBar, expression: "showNoticeBar" }], class: ['van-notice-bar', { 'van-notice-bar--withicon': _vm.mode }], on: { "click": function click($event) {
          _vm.$emit('click');
        } } }, [_c('div', { ref: "contentWrap", staticClass: "van-notice-bar__content-wrap" }, [_c('div', { ref: "content", staticClass: "van-notice-bar__content", style: _vm.contentStyle, on: { "transitionend": _vm.onTransitionEnd } }, [_vm._t("default", [_vm._v(_vm._s(_vm.text))])], 2)]), _vm.iconName ? _c('van-icon', { staticClass: "van-notice-bar__icon", attrs: { "name": _vm.iconName }, on: { "click": _vm.onClickIcon } }) : _vm._e()], 1);
  },

  name: 'van-notice-bar',

  components: (_components = {}, _components[_icon2.default.name] = _icon2.default, _components),

  props: {
    text: String,
    mode: {
      type: String,
      default: '',
      validator: function validator(val) {
        return NOTICE_BAR_MODE.indexOf(val) !== -1;
      }
    },
    delay: {
      type: [String, Number],
      default: 1
    },
    scrollable: {
      type: Boolean,
      default: true
    },
    speed: {
      type: Number,
      default: 40
    }
  },

  data: function data() {
    return {
      duration: 0,
      offsetWidth: 0,
      showNoticeBar: true,
      diableTransition: false
    };
  },


  computed: {
    iconName: function iconName() {
      return this.mode === 'closeable' ? 'close' : this.mode === 'link' ? 'arrow' : '';
    },
    contentStyle: function contentStyle() {
      return {
        left: -this.offsetWidth + 'px',
        transitionDelay: this.delay + 's',
        transitionDuration: this.duration + 's',
        transitionProperty: this.diableTransition ? 'none' : 'left'
      };
    }
  },

  mounted: function mounted() {
    var offsetWidth = this.$refs.content.getBoundingClientRect().width;
    var wrapWidth = this.$refs.contentWrap.getBoundingClientRect().width;
    if (this.scrollable && offsetWidth > wrapWidth) {
      this.offsetWidth = offsetWidth;
      this.duration = (offsetWidth + wrapWidth) / this.speed;
    }
  },


  methods: {
    onClickIcon: function onClickIcon() {
      this.showNoticeBar = this.mode !== 'closeable';
    },
    onTransitionEnd: function onTransitionEnd() {
      var _this = this;

      var offsetWidth = this.offsetWidth;

      this.diableTransition = true;
      this.offsetWidth = 0;

      setTimeout(function () {
        _this.diableTransition = false;
        _this.offsetWidth = offsetWidth;
      }, 50);
    }
  }
};