'use strict';

exports.__esModule = true;

var _components;

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

var _popup = require('../mixins/popup');

var _popup2 = _interopRequireDefault(_popup);

var _swipe = require('../swipe');

var _swipe2 = _interopRequireDefault(_swipe);

var _swipeItem = require('../swipe-item');

var _swipeItem2 = _interopRequireDefault(_swipeItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  render: function render() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('transition', { attrs: { "name": "image-fade" } }, [_c('div', { directives: [{ name: "show", rawName: "v-show", value: _vm.value, expression: "value" }], ref: "previewContainer", staticClass: "van-image-preview" }, [_c('van-swipe', _vm._l(_vm.images, function (item, index) {
      return _c('van-swipe-item', { key: index }, [_c('img', { staticClass: "van-image-preview__image", attrs: { "src": item, "alt": "" }, on: { "load": _vm.handleLoad } })]);
    }))], 1)]);
  },

  name: 'van-image-preview',

  mixins: [_popup2.default],

  components: (_components = {}, _components[_swipe2.default.name] = _swipe2.default, _components[_swipeItem2.default.name] = _swipeItem2.default, _components),

  props: {
    overlay: {
      default: true
    },

    lockOnScroll: {
      default: true
    },

    closeOnClickOverlay: {
      default: true
    }
  },

  data: function data() {
    return {
      images: [],
      viewportSize: null
    };
  },


  methods: {
    handleLoad: function handleLoad(event) {
      var container = this.$refs.previewContainer;
      var containerSize = container.getBoundingClientRect();
      var ratio = containerSize.width / containerSize.height;
      var target = event.currentTarget;
      var targetRatio = target.width / target.height;

      var centerClass = 'van-image-preview__image--center';
      var bigClass = 'van-image-preview__image--big';

      if (targetRatio > ratio) {
        target.className += ' ' + centerClass;
      } else {
        target.className += ' ' + bigClass;
      }
    },
    close: function close() {
      var _this = this;

      /* istanbul ignore if */
      if (this.closing) return;

      this.closing = true;

      this.value = false;

      /* istanbul ignore else */
      if (this.lockOnScroll) {
        setTimeout(function () {
          if (_this.overlay && _this.bodyOverflow !== 'hidden') {
            document.body.style.overflow = _this.bodyOverflow;
          }
          _this.bodyOverflow = null;
        }, 200);
      }

      this.opened = false;
      this.doAfterClose();
    }
  },

  mounted: function mounted() {
    var _this2 = this;

    var supportTouch = !_vue2.default.prototype.$isServer && 'ontouchstart' in window;
    var container = this.$refs.previewContainer;

    /* istanbul ignore else */
    if (supportTouch) {
      var touchStartTime = void 0;

      container.addEventListener('touchstart', function () {
        touchStartTime = new Date();
      });
      container.addEventListener('touchend', function () {
        /* istanbul ignore else */
        if (new Date() - touchStartTime < 1500) {
          _this2.value = false;
        }
      });
    } else {
      container.addEventListener('click', function () {
        _this2.value = false;
      });
    }
  }
};