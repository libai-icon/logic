'use strict';

exports.__esModule = true;

var _input = require('./input');

var _input2 = _interopRequireDefault(_input);

var _scroll = require('./scroll');

var _scroll2 = _interopRequireDefault(_scroll);

var _spring_dummy = require('./spring_dummy');

var _spring_dummy2 = _interopRequireDefault(_spring_dummy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  render: function render() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "van-swipe" }, [_c('div', { staticClass: "van-swipe__items" }, [_vm._t("default")], 2), _vm.showIndicators && _vm.swipes.length > 1 ? _c('div', { staticClass: "van-swipe__indicators" }, _vm._l(_vm.swipes.length, function (item, index) {
      return _c('span', { key: index, staticClass: "van-swipe__indicator", class: {
          'van-swipe__indicator--active': _vm.currIndex === index
        } });
    })) : _vm._e()]);
  },

  name: 'van-swipe',

  props: {
    autoPlay: Boolean,
    showIndicators: {
      type: Boolean,
      default: true
    }
  },

  data: function data() {
    return {
      currIndex: 0,
      swipes: []
    };
  },
  mounted: function mounted() {
    this.input = new _input2.default(this.$el, {
      listenMoving: true
    });

    this.input.on('move', function (dist, isEnd, e, extra) {
      if (extra.orgDirection) {
        e.preventDefault();
        scroll.movePage(dist.x, isEnd);
      }
    });

    this.scroll = new _scroll2.default(this.$el, {
      autoPlay: this.autoPlay
    });

    var scroll = this.scroll;
    scroll.on('pageChangeEnd', this.onPageChangeEnd);

    var dummy = new _spring_dummy2.default(scroll, this.input);

    dummy.on('bounce', function (dist, isEnd) {
      scroll.movePage(dist.x, isEnd);
    }).on('autoPlay', function (dist, isEnd) {
      scroll.movePage(dist.x, isEnd);
    });
    this.dummy = dummy;
  },


  watch: {
    swipes: function swipes(value) {
      if (this.autoPlay && value.length > 1) {
        this.dummy.initMove();
      } else {
        this.dummy.clearMove();
      }
      this.scroll.update();
      return value;
    },
    autoPlay: function autoPlay(value) {
      if (value && this.swipes.length > 1) {
        this.dummy.initMove();
      } else {
        this.dummy.clearMove();
      }
      return value;
    }
  },

  methods: {
    onPageChangeEnd: function onPageChangeEnd(page, currIndex) {
      this.currIndex = +currIndex;
      this.$emit('pagechange:end', page, currIndex);
    }
  }
};